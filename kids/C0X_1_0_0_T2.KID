KIDS Distribution saved on Oct 30, 2011@11:45:44
version which imports some rdf files YAY!!!!
**KIDS**:C0X*1.0*0^

**INSTALL NAME**
C0X*1.0*0
"BLD",7885,0)
C0X*1.0*0^^0^3111030^n
"BLD",7885,4,0)
^9.64PA^172.201^2
"BLD",7885,4,172.101,0)
172.101
"BLD",7885,4,172.101,222)
y^y^f^^^^n
"BLD",7885,4,172.201,0)
172.201
"BLD",7885,4,172.201,222)
y^y^f^^^^n
"BLD",7885,4,"B",172.101,172.101)

"BLD",7885,4,"B",172.201,172.201)

"BLD",7885,6.3)
2
"BLD",7885,"KRN",0)
^9.67PA^779.2^20
"BLD",7885,"KRN",.4,0)
.4
"BLD",7885,"KRN",.401,0)
.401
"BLD",7885,"KRN",.402,0)
.402
"BLD",7885,"KRN",.403,0)
.403
"BLD",7885,"KRN",.5,0)
.5
"BLD",7885,"KRN",.84,0)
.84
"BLD",7885,"KRN",3.6,0)
3.6
"BLD",7885,"KRN",3.8,0)
3.8
"BLD",7885,"KRN",9.2,0)
9.2
"BLD",7885,"KRN",9.8,0)
9.8
"BLD",7885,"KRN",9.8,"NM",0)
^9.68A^1^1
"BLD",7885,"KRN",9.8,"NM",1,0)
C0XMAIN^^0^B76730608
"BLD",7885,"KRN",9.8,"NM","B","C0XMAIN",1)

"BLD",7885,"KRN",19,0)
19
"BLD",7885,"KRN",19.1,0)
19.1
"BLD",7885,"KRN",101,0)
101
"BLD",7885,"KRN",409.61,0)
409.61
"BLD",7885,"KRN",771,0)
771
"BLD",7885,"KRN",779.2,0)
779.2
"BLD",7885,"KRN",870,0)
870
"BLD",7885,"KRN",8989.51,0)
8989.51
"BLD",7885,"KRN",8989.52,0)
8989.52
"BLD",7885,"KRN",8994,0)
8994
"BLD",7885,"KRN","B",.4,.4)

"BLD",7885,"KRN","B",.401,.401)

"BLD",7885,"KRN","B",.402,.402)

"BLD",7885,"KRN","B",.403,.403)

"BLD",7885,"KRN","B",.5,.5)

"BLD",7885,"KRN","B",.84,.84)

"BLD",7885,"KRN","B",3.6,3.6)

"BLD",7885,"KRN","B",3.8,3.8)

"BLD",7885,"KRN","B",9.2,9.2)

"BLD",7885,"KRN","B",9.8,9.8)

"BLD",7885,"KRN","B",19,19)

"BLD",7885,"KRN","B",19.1,19.1)

"BLD",7885,"KRN","B",101,101)

"BLD",7885,"KRN","B",409.61,409.61)

"BLD",7885,"KRN","B",771,771)

"BLD",7885,"KRN","B",779.2,779.2)

"BLD",7885,"KRN","B",870,870)

"BLD",7885,"KRN","B",8989.51,8989.51)

"BLD",7885,"KRN","B",8989.52,8989.52)

"BLD",7885,"KRN","B",8994,8994)

"FIA",172.101)
C0X TRIPLE
"FIA",172.101,0)
^C0X(101,
"FIA",172.101,0,0)
172.101I
"FIA",172.101,0,1)
y^y^f^^^^n
"FIA",172.101,0,10)

"FIA",172.101,0,11)

"FIA",172.101,0,"RLRO")

"FIA",172.101,172.101)
0
"FIA",172.201)
C0X STRING
"FIA",172.201,0)
^C0X(201,
"FIA",172.201,0,0)
172.201
"FIA",172.201,0,1)
y^y^f^^^^n
"FIA",172.201,0,10)

"FIA",172.201,0,11)

"FIA",172.201,0,"RLRO")

"FIA",172.201,172.201)
0
"FIA",172.201,172.2011)
0
"IX",172.101,172.101,"G",0)
172.101^G^REGULAR INDEX OF THE GRAPH FIELD^R^^F^IR^I^172.101^^^^^LS
"IX",172.101,172.101,"G",1)
S ^C0X(101,"G",X,DA)=""
"IX",172.101,172.101,"G",2)
K ^C0X(101,"G",X,DA)
"IX",172.101,172.101,"G",2.5)
K ^C0X(101,"G")
"IX",172.101,172.101,"G",11.1,0)
^.114IA^1^1
"IX",172.101,172.101,"G",11.1,1,0)
1^F^172.101^.02^^1^F
"IX",172.101,172.101,"G",11.1,1,3)

"IX",172.101,172.101,"OPS",0)
172.101^OPS^REGULAR INDEX OF OBJECT PREDICATE SUBJECT^R^^R^IR^I^172.101^^^^^LS
"IX",172.101,172.101,"OPS",1)
S ^C0X(101,"OPS",X(1),X(2),X(3),DA)=""
"IX",172.101,172.101,"OPS",2)
K ^C0X(101,"OPS",X(1),X(2),X(3),DA)
"IX",172.101,172.101,"OPS",2.5)
K ^C0X(101,"OPS")
"IX",172.101,172.101,"OPS",11.1,0)
^.114IA^3^3
"IX",172.101,172.101,"OPS",11.1,1,0)
1^F^172.101^.05^^1^F
"IX",172.101,172.101,"OPS",11.1,1,3)

"IX",172.101,172.101,"OPS",11.1,2,0)
2^F^172.101^.04^^2^F
"IX",172.101,172.101,"OPS",11.1,2,3)

"IX",172.101,172.101,"OPS",11.1,3,0)
3^F^172.101^.03^^3^F
"IX",172.101,172.101,"OPS",11.1,3,3)

"IX",172.101,172.101,"OSP",0)
172.101^OSP^REGULAR INDEX OF OBJECT SUBJECT PREDICATE^R^^R^IR^I^172.101^^^^^LS
"IX",172.101,172.101,"OSP",1)
S ^C0X(101,"OSP",X(1),X(2),X(3),DA)=""
"IX",172.101,172.101,"OSP",2)
K ^C0X(101,"OSP",X(1),X(2),X(3),DA)
"IX",172.101,172.101,"OSP",2.5)
K ^C0X(101,"OSP")
"IX",172.101,172.101,"OSP",11.1,0)
^.114IA^3^3
"IX",172.101,172.101,"OSP",11.1,1,0)
1^F^172.101^.05^^1^F
"IX",172.101,172.101,"OSP",11.1,1,3)

"IX",172.101,172.101,"OSP",11.1,2,0)
2^F^172.101^.03^^2^F
"IX",172.101,172.101,"OSP",11.1,2,3)

"IX",172.101,172.101,"OSP",11.1,3,0)
3^F^172.101^.04^^3^F
"IX",172.101,172.101,"OSP",11.1,3,3)

"IX",172.101,172.101,"PSO",0)
172.101^PSO^REGULAR INDEX OF PREDICATE SUBJECT OBJECT^R^^R^IR^I^172.101^^^^^LS
"IX",172.101,172.101,"PSO",1)
S ^C0X(101,"PSO",X(1),X(2),X(3),DA)=""
"IX",172.101,172.101,"PSO",2)
K ^C0X(101,"PSO",X(1),X(2),X(3),DA)
"IX",172.101,172.101,"PSO",2.5)
K ^C0X(101,"PSO")
"IX",172.101,172.101,"PSO",11.1,0)
^.114IA^3^3
"IX",172.101,172.101,"PSO",11.1,1,0)
1^F^172.101^.04^^1^F
"IX",172.101,172.101,"PSO",11.1,1,3)

"IX",172.101,172.101,"PSO",11.1,2,0)
2^F^172.101^.03^^2^F
"IX",172.101,172.101,"PSO",11.1,2,3)

"IX",172.101,172.101,"PSO",11.1,3,0)
3^F^172.101^.05^^3^F
"IX",172.101,172.101,"PSO",11.1,3,3)

"IX",172.101,172.101,"SPO",0)
172.101^SPO^REGULAR INDEX OF SUBJECT PREDICATE OBJECT^R^^R^IR^I^172.101^^^^^LS
"IX",172.101,172.101,"SPO",1)
S ^C0X(101,"SPO",X(1),X(2),X(3),DA)=""
"IX",172.101,172.101,"SPO",2)
K ^C0X(101,"SPO",X(1),X(2),X(3),DA)
"IX",172.101,172.101,"SPO",2.5)
K ^C0X(101,"SPO")
"IX",172.101,172.101,"SPO",11.1,0)
^.114IA^3^3
"IX",172.101,172.101,"SPO",11.1,1,0)
1^F^172.101^.03^^1^F
"IX",172.101,172.101,"SPO",11.1,1,3)

"IX",172.101,172.101,"SPO",11.1,2,0)
2^F^172.101^.04^^2^F
"IX",172.101,172.101,"SPO",11.1,2,3)

"IX",172.101,172.101,"SPO",11.1,3,0)
3^F^172.101^.05^^3^F
"IX",172.101,172.101,"SPO",11.1,3,3)

"IX",172.201,172.201,"B",0)
172.201^B^regular B index for strings to support long strings^R^^F^IR^I^172.201^^^^^LS
"IX",172.201,172.201,"B",1)
S ^C0X(201,"B",$E(X,1,240),DA)=""
"IX",172.201,172.201,"B",2)
K ^C0X(201,"B",$E(X,1,240),DA)
"IX",172.201,172.201,"B",2.5)
K ^C0X(201,"B")
"IX",172.201,172.201,"B",11.1,0)
^.114IA^1^1
"IX",172.201,172.201,"B",11.1,1,0)
1^F^172.201^.01^240^1^F
"MBREQ")
0
"QUES","XPF1",0)
Y
"QUES","XPF1","??")
^D REP^XPDH
"QUES","XPF1","A")
Shall I write over your |FLAG| File
"QUES","XPF1","B")
YES
"QUES","XPF1","M")
D XPF1^XPDIQ
"QUES","XPF2",0)
Y
"QUES","XPF2","??")
^D DTA^XPDH
"QUES","XPF2","A")
Want my data |FLAG| yours
"QUES","XPF2","B")
YES
"QUES","XPF2","M")
D XPF2^XPDIQ
"QUES","XPI1",0)
YO
"QUES","XPI1","??")
^D INHIBIT^XPDH
"QUES","XPI1","A")
Want KIDS to INHIBIT LOGONs during the install
"QUES","XPI1","B")
NO
"QUES","XPI1","M")
D XPI1^XPDIQ
"QUES","XPM1",0)
PO^VA(200,:EM
"QUES","XPM1","??")
^D MG^XPDH
"QUES","XPM1","A")
Enter the Coordinator for Mail Group '|FLAG|'
"QUES","XPM1","B")

"QUES","XPM1","M")
D XPM1^XPDIQ
"QUES","XPO1",0)
Y
"QUES","XPO1","??")
^D MENU^XPDH
"QUES","XPO1","A")
Want KIDS to Rebuild Menu Trees Upon Completion of Install
"QUES","XPO1","B")
NO
"QUES","XPO1","M")
D XPO1^XPDIQ
"QUES","XPZ1",0)
Y
"QUES","XPZ1","??")
^D OPT^XPDH
"QUES","XPZ1","A")
Want to DISABLE Scheduled Options, Menu Options, and Protocols
"QUES","XPZ1","B")
NO
"QUES","XPZ1","M")
D XPZ1^XPDIQ
"QUES","XPZ2",0)
Y
"QUES","XPZ2","??")
^D RTN^XPDH
"QUES","XPZ2","A")
Want to MOVE routines to other CPUs
"QUES","XPZ2","B")
NO
"QUES","XPZ2","M")
D XPZ2^XPDIQ
"RTN")
1
"RTN","C0XMAIN")
0^1^B76730608
"RTN","C0XMAIN",1,0)
C0XMAIN ; GPL - Fileman Triples entry point routine ;10/13/11  17:05
"RTN","C0XMAIN",2,0)
 ;;0.1;C0X;nopatch;noreleasedate;Build 2
"RTN","C0XMAIN",3,0)
 ;Copyright 2011 George Lilly.  Licensed under the terms of the GNU
"RTN","C0XMAIN",4,0)
 ;General Public License See attached copy of the License.
"RTN","C0XMAIN",5,0)
 ;
"RTN","C0XMAIN",6,0)
 ;This program is free software; you can redistribute it and/or modify
"RTN","C0XMAIN",7,0)
 ;it under the terms of the GNU General Public License as published by
"RTN","C0XMAIN",8,0)
 ;the Free Software Foundation; either version 2 of the License, or
"RTN","C0XMAIN",9,0)
 ;(at your option) any later version.
"RTN","C0XMAIN",10,0)
 ;
"RTN","C0XMAIN",11,0)
 ;This program is distributed in the hope that it will be useful,
"RTN","C0XMAIN",12,0)
 ;but WITHOUT ANY WARRANTY; without even the implied warranty of
"RTN","C0XMAIN",13,0)
 ;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
"RTN","C0XMAIN",14,0)
 ;GNU General Public License for more details.
"RTN","C0XMAIN",15,0)
 ;
"RTN","C0XMAIN",16,0)
 ;You should have received a copy of the GNU General Public License along
"RTN","C0XMAIN",17,0)
 ;with this program; if not, write to the Free Software Foundation, Inc.,
"RTN","C0XMAIN",18,0)
 ;51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
"RTN","C0XMAIN",19,0)
 ;
"RTN","C0XMAIN",20,0)
 Q
"RTN","C0XMAIN",21,0)
 ;
"RTN","C0XMAIN",22,0)
INITFARY(ZFARY) ; INITIALIZE FILE NUMBERS AND OTHER USEFUL THINGS
"RTN","C0XMAIN",23,0)
 ; FOR THE DEFAULT TRIPLE STORE. USE OTHER VALUES FOR SUPPORTING ADDITIONAL
"RTN","C0XMAIN",24,0)
 ; TRIPLE STORES
"RTN","C0XMAIN",25,0)
 S @ZFARY@("C0XTFN")=172.101 ; TRIPLES FILE NUMBER
"RTN","C0XMAIN",26,0)
 S @ZFARY@("C0XSFN")=172.201 ; TRIPLES STRINGS FILE NUMBER
"RTN","C0XMAIN",27,0)
 S @ZFARY@("C0XTN")=$NA(^C0X(101)) ; TRIPLES GLOBAL NAME
"RTN","C0XMAIN",28,0)
 S @ZFARY@("C0XSN")=$NA(^C0X(201)) ; STRING FILE GLOBAL NAME
"RTN","C0XMAIN",29,0)
 S @ZFARY@("C0XDIR")="/home/glilly/all_smart_patient_data/smart-rdf/"
"RTN","C0XMAIN",30,0)
 D USEFARY(ZFARY)
"RTN","C0XMAIN",31,0)
 Q
"RTN","C0XMAIN",32,0)
 ;
"RTN","C0XMAIN",33,0)
USEFARY(ZFARY) ; INITIALIZES VARIABLES SAVED IN ARRAY ZFARY
"RTN","C0XMAIN",34,0)
 N ZI S ZI=""
"RTN","C0XMAIN",35,0)
 F  S ZI=$O(@ZFARY@(ZI)) Q:ZI=""  D  
"RTN","C0XMAIN",36,0)
 . ;N ZX
"RTN","C0XMAIN",37,0)
 . S ZX="S "_ZI_"="""_@ZFARY@(ZI)_""""
"RTN","C0XMAIN",38,0)
 . ;W !,ZX
"RTN","C0XMAIN",39,0)
 . X ZX
"RTN","C0XMAIN",40,0)
 Q
"RTN","C0XMAIN",41,0)
 ;
"RTN","C0XMAIN",42,0)
IMPORT(FNAME,FDIR,FURL,FARY) ; EXTRINSIC THAT READS A FILE FROM THE STANDARD 
"RTN","C0XMAIN",43,0)
 ; DIRECTORY, LOADS IT INTO THE TRIPLESTORE AS TEXT, AND RETURNS THE
"RTN","C0XMAIN",44,0)
 ; NODE NAME OF THE TEXT TRIPLE
"RTN","C0XMAIN",45,0)
 ; FDIR IS THE OPTIONAL DIRECTORY (DEFAUTS TO STANDARD DIR)
"RTN","C0XMAIN",46,0)
 ; FURL IS THE OPTIONAL URI FOR ACCESSING THE FILE FROM THE TRIPLE STORE
"RTN","C0XMAIN",47,0)
 ; FARY IS THE OPTIONAL FILE ARRAY OF THE TRIPLE STORE TO USE
"RTN","C0XMAIN",48,0)
 I '$D(FARY) D  ;
"RTN","C0XMAIN",49,0)
 . D INITFARY("C0XFARY")
"RTN","C0XMAIN",50,0)
 . S FARY="C0XFARY"
"RTN","C0XMAIN",51,0)
 D USEFARY(FARY)
"RTN","C0XMAIN",52,0)
 N ZD,ZTMP
"RTN","C0XMAIN",53,0)
 I '$D(FDIR) S FDIR=C0XDIR ; DIRECTORY OF THE RDF FILE
"RTN","C0XMAIN",54,0)
 I '$D(FURL) D  ;
"RTN","C0XMAIN",55,0)
 . N ZN2 S ZN2=$TR(FNAME,".","_") ; REMOVE THE DOT FROM THE NAME
"RTN","C0XMAIN",56,0)
 . S FURL=FDIR_ZN2
"RTN","C0XMAIN",57,0)
 N ZTMP
"RTN","C0XMAIN",58,0)
 S ZTMP=$NA(^TMP("C0X",$J,"FILEIN",1)) ; WHERE TO PUT THE INCOMING FILE
"RTN","C0XMAIN",59,0)
 K @ZTMP ; MAKE SURE IT'S CLEAR
"RTN","C0XMAIN",60,0)
 W !,"STARTED: ",$$NOW^XLFDT
"RTN","C0XMAIN",61,0)
 W !,"READING IN: ",FNAME
"RTN","C0XMAIN",62,0)
 I '$$FILEIN(ZTMP,FDIR,FNAME,4) D  Q  ; QUIT IF NO SUCCESS
"RTN","C0XMAIN",63,0)
 . W !,"ERROR READING FILE: ",FDIR,FNAME 
"RTN","C0XMAIN",64,0)
 S ZRDF=$NA(^TMP("C0X",$J,"FILEIN")) ; WITHOUT THE SUBSCRIPT
"RTN","C0XMAIN",65,0)
 W !,$O(@ZRDF@(""),-1)," LINES READ"
"RTN","C0XMAIN",66,0)
 N ZGRAPH,ZSUBJECT
"RTN","C0XMAIN",67,0)
 S ZGRAPH="_:G"_$$LKY9 ; RANDOM GRAPH NAME
"RTN","C0XMAIN",68,0)
 S ZSUBJECT=$$ANONS ; RANDOM ANOYMOUS SUBJECT
"RTN","C0XMAIN",69,0)
 D ADD(ZGRAPH,ZSUBJECT,"fmts:url",FURL)
"RTN","C0XMAIN",70,0)
 N ZTXTNM
"RTN","C0XMAIN",71,0)
 S ZTXTNM="_TXT_INCOMING_RDF_FILE_"_$$LKY9 ; NAME FOR TEXT NODE
"RTN","C0XMAIN",72,0)
 D ADD(ZGRAPH,ZSUBJECT,"fmts:rdfSource",ZTXTNM)
"RTN","C0XMAIN",73,0)
 D UPDIE(.C0XFDA) ; TRY IT OUT
"RTN","C0XMAIN",74,0)
 K C0XCNT ;RESET FOR NEXT TIME
"RTN","C0XMAIN",75,0)
 D PROCESS(.G,ZRDF,FURL,ZGRAPH) ; PARSE AND INSERT THE RDF
"RTN","C0XMAIN",76,0)
 Q
"RTN","C0XMAIN",77,0)
 ;
"RTN","C0XMAIN",78,0)
FILEIN(ZINTMP,ZDIR,ZFNAME,ZLVL) ; READS A FILE INTO ZINTMP USING FTG^%ZISH
"RTN","C0XMAIN",79,0)
 ; ZINTMP IS PASSED BY NAME AND INCLUDES THE NEW SUBSCRIPT
"RTN","C0XMAIN",80,0)
 ; IE ^TMP("C0X","FILEIN",1)
"RTN","C0XMAIN",81,0)
 ; ZLVL IN THIS CASE WOULD BE 3 INCREMENTING THE 1
"RTN","C0XMAIN",82,0)
 ; EXTRINSIC WHICH RETURNS THE RESULT OF FTG^%ZISH
"RTN","C0XMAIN",83,0)
 S OK=$$FTG^%ZISH(ZDIR,FNAME,ZINTMP,ZLVL)
"RTN","C0XMAIN",84,0)
 Q OK
"RTN","C0XMAIN",85,0)
 ;
"RTN","C0XMAIN",86,0)
TESTPROC ; TEST PROCESS WITH EXISTING SMALL RDF FILE
"RTN","C0XMAIN",87,0)
 S ZIN=$NA(^TMP("C0X",12226,"FILEIN"))
"RTN","C0XMAIN",88,0)
 S ZGRAPH="/test/rdfFile"
"RTN","C0XMAIN",89,0)
 S ZM="/test/rdfFile/meta"
"RTN","C0XMAIN",90,0)
 D PROCESS(.G,ZIN,ZGRAPH,ZM)
"RTN","C0XMAIN",91,0)
 Q
"RTN","C0XMAIN",92,0)
 ;
"RTN","C0XMAIN",93,0)
PROCESS(ZRTN,ZRDF,ZGRF,ZMETA) ; PROCESS AN INCOMING RDF FILE
"RTN","C0XMAIN",94,0)
 ; ZRTN IS PASS BY REFERENCE AND RETURNS MESSAGES ABOUT THE PROCESSING
"RTN","C0XMAIN",95,0)
 ; ZRDF IS PASSED BY NAME AND IS THE GLOBAL CONTAINING THE RDF FILE
"RTN","C0XMAIN",96,0)
 ; ZGRF IS THE NAME OF THE GRAPH TO USE IN THE TRIPLE STORE FOR RESULTS
"RTN","C0XMAIN",97,0)
 ; ZMETA IS OPTIONAL AND IS THE NAME OF THE GRAPH TO STORE METADATA
"RTN","C0XMAIN",98,0)
 ;
"RTN","C0XMAIN",99,0)
 ; -- first parse the rdf file with the MXML parser
"RTN","C0XMAIN",100,0)
 S C0XDOCID=$$PARSE^C0CNHIN(ZRDF,"C0XARRAY") ; PARSE WITH MXML
"RTN","C0XMAIN",101,0)
 ; -- assign the MXLM dom global name to ZDOM
"RTN","C0XMAIN",102,0)
 S ZDOM=$NA(^TMP("MXMLDOM",$J,C0XDOCID))
"RTN","C0XMAIN",103,0)
 W !,$O(@ZDOM@(""),-1)," XML NODES PARSED"
"RTN","C0XMAIN",104,0)
 ; -- populate the metagraph to point to the graph with status unfinished
"RTN","C0XMAIN",105,0)
 S METAS=$$ANONS ; GET AN ANONOMOUS RANDOM SUBJECT
"RTN","C0XMAIN",106,0)
 I '$D(ZMETA) S ZMETA="_:G"_$$LKY9 ; RANDOM GRAPH NAME FOR METAGRAPH
"RTN","C0XMAIN",107,0)
 D ADD(ZMETA,METAS,"fmts:about",ZGRF) ; POINT THE META TO THE GRAPH
"RTN","C0XMAIN",108,0)
 D ADD(ZMETA,METAS,"fmts:status","unfinished") ; mark as unfinished
"RTN","C0XMAIN",109,0)
 S C0XDATE=$$FMDTOUTC^C0CUTIL($$NOW^XLFDT,"DT")
"RTN","C0XMAIN",110,0)
 D ADD(ZMETA,METAS,"fmts:dateTime",C0XDATE)
"RTN","C0XMAIN",111,0)
 D UPDIE(.C0XFDA) ; commit the metagraph changes to the triple store
"RTN","C0XMAIN",112,0)
 ; -- 
"RTN","C0XMAIN",113,0)
 ; -- pull out the vocabularies in the RDF statement. marked with xmlns:
"RTN","C0XMAIN",114,0)
 ; -- put them in a local variable for quick reference
"RTN","C0XMAIN",115,0)
 ; -- TODO: create a graph for vocabularies and validate incoming against it
"RTN","C0XMAIN",116,0)
 ;
"RTN","C0XMAIN",117,0)
 S C0XVOC=""
"RTN","C0XMAIN",118,0)
 N ZI,ZJ,ZK S ZI=""
"RTN","C0XMAIN",119,0)
 F  S ZI=$O(@ZDOM@(1,"A",ZI)) Q:ZI=""  D  ; FOR EACH xmlns
"RTN","C0XMAIN",120,0)
 . S ZVOC=$P(ZI,"xmlns:",2)
"RTN","C0XMAIN",121,0)
 . I ZVOC'="" S C0XVOC(ZVOC)=$G(@ZDOM@(1,"A",ZI))
"RTN","C0XMAIN",122,0)
 ;W !,"VOCABS:" ZWR C0XVOC
"RTN","C0XMAIN",123,0)
 ;
"RTN","C0XMAIN",124,0)
 ; -- look for children called rdf:Description. quit if none. not an rdf file
"RTN","C0XMAIN",125,0)
 ;
"RTN","C0XMAIN",126,0)
 S ZI=$O(@ZDOM@(1,"C",""))
"RTN","C0XMAIN",127,0)
 I $G(@ZDOM@(1,"C",ZI))'="rdf:Description" D  Q  ; not an rdf file
"RTN","C0XMAIN",128,0)
 . W !,"Error. Not an RDF file. Cannot process."
"RTN","C0XMAIN",129,0)
 ;
"RTN","C0XMAIN",130,0)
 ; -- now process the rdf description children
"RTN","C0XMAIN",131,0)
 ;
"RTN","C0XMAIN",132,0)
 S ZI=""
"RTN","C0XMAIN",133,0)
 S (C0XSUB,C0XPRE,C0XOBJ)="" ; INITIALIZE subject, object and predicate
"RTN","C0XMAIN",134,0)
 F  S ZI=$O(@ZDOM@(1,"C",ZI)) Q:ZI=""  D  ;
"RTN","C0XMAIN",135,0)
 . ; -- we are skipping any child that is not rdf:Description
"RTN","C0XMAIN",136,0)
 . ; -- TODO: check to see if this is right in general
"RTN","C0XMAIN",137,0)
 . ;
"RTN","C0XMAIN",138,0)
 . IF $G(@ZDOM@(1,"C",ZI))'="rdf:Description" D  Q  ;
"RTN","C0XMAIN",139,0)
 . . W !,"SKIPPING NODE: ",ZI
"RTN","C0XMAIN",140,0)
 . ; -- now looking for the subject for the triples
"RTN","C0XMAIN",141,0)
 . S ZX=$G(@ZDOM@(ZI,"A","rdf:about"))
"RTN","C0XMAIN",142,0)
 . I ZX'="" D  ; we have the subject
"RTN","C0XMAIN",143,0)
 . . ;W " about: ",ZX
"RTN","C0XMAIN",144,0)
 . . S C0XSUB=ZX
"RTN","C0XMAIN",145,0)
 . E  D  ;
"RTN","C0XMAIN",146,0)
 . . S ZX=$G(@ZDOM@(ZI,"A","rdf:nodeID")) ; node id is another style of subject
"RTN","C0XMAIN",147,0)
 . . I ZX'="" D  ;
"RTN","C0XMAIN",148,0)
 . . . S C0XSUB=ZX
"RTN","C0XMAIN",149,0)
 . I C0XSUB="" S C0XSUB=$$ANONS ; DEFAULT TO BLANK SUBJECT
"RTN","C0XMAIN",150,0)
 . ; 
"RTN","C0XMAIN",151,0)
 . ; -- we now have the subject. the children of this node have the rest
"RTN","C0XMAIN",152,0)
 . ;
"RTN","C0XMAIN",153,0)
 . S ZJ="" ; for the children of the rdf:Description nodes
"RTN","C0XMAIN",154,0)
 . F  S ZJ=$O(@ZDOM@(ZI,"C",ZJ)) Q:ZJ=""  D  ; for each child
"RTN","C0XMAIN",155,0)
 . . S C0XPRE=@ZDOM@(ZJ) ; the predicate without a prefix
"RTN","C0XMAIN",156,0)
 . . S ZX=$G(@ZDOM@(ZJ,"A","xmlns")) ; name space
"RTN","C0XMAIN",157,0)
 . . I ZX'="" S C0XPRE=ZX_C0XPRE ; add the namespace prefix
"RTN","C0XMAIN",158,0)
 . . I C0XPRE[":" D  ; expand using vocabulary
"RTN","C0XMAIN",159,0)
 . . . N ZB,ZA
"RTN","C0XMAIN",160,0)
 . . . S ZB=$P(C0XPRE,":",1)
"RTN","C0XMAIN",161,0)
 . . . S ZA=$P(C0XPRE,":",2)
"RTN","C0XMAIN",162,0)
 . . . I $G(C0XVOC(ZB))'="" D  ;
"RTN","C0XMAIN",163,0)
 . . . . S C0XPRE=C0XVOC(ZB)_ZA ; expanded 
"RTN","C0XMAIN",164,0)
 . . S ZY=$G(@ZDOM@(ZJ,"A","rdf:resource")) ; potential object
"RTN","C0XMAIN",165,0)
 . . I ZY'="" D  Q ; 
"RTN","C0XMAIN",166,0)
 . . . S C0XOBJ=ZY ; object
"RTN","C0XMAIN",167,0)
 . . . D ADD(ZGRF,C0XSUB,C0XPRE,C0XOBJ) ; finally. our first real triple
"RTN","C0XMAIN",168,0)
 . . ; -- this is an else because of the quit above
"RTN","C0XMAIN",169,0)
 . . S ZX=$G(@ZDOM@(ZJ,"A","rdf:nodeID")) ; fishing for nodeId object
"RTN","C0XMAIN",170,0)
 . . I ZX'="" D  Q  ; got one
"RTN","C0XMAIN",171,0)
 . . . S C0XOBJ=ZX ; we are using the incoming nodeIDs as object/subject 
"RTN","C0XMAIN",172,0)
 . . . ; without change... this could be foolish .. look at it again later
"RTN","C0XMAIN",173,0)
 . . . D ADD(ZGRF,C0XSUB,C0XPRE,C0XOBJ) ; go for it and add a node
"RTN","C0XMAIN",174,0)
 . . S C0XOBJ=$G(@ZDOM@(ZJ,"T",1)) ; hopefully an object is here
"RTN","C0XMAIN",175,0)
 . . I C0XOBJ="" D  Q  ; not a happy situation
"RTN","C0XMAIN",176,0)
 . . . W !,"ERROR, NO OBJECT FOUND FOR NODE: ",ZJ
"RTN","C0XMAIN",177,0)
 . . D ADD(ZGRF,C0XSUB,C0XPRE,C0XOBJ) ; go for it and add a node
"RTN","C0XMAIN",178,0)
 W !,"INSERTING ",C0XCNT," TRIPLES"
"RTN","C0XMAIN",179,0)
 D UPDIE(.C0XFDA) ; commit the updates to the file
"RTN","C0XMAIN",180,0)
 ; next, mark the graph as finished
"RTN","C0XMAIN",181,0)
 W !," ENDED AT: ",$$NOW^XLFDT
"RTN","C0XMAIN",182,0)
 Q
"RTN","C0XMAIN",183,0)
 ;
"RTN","C0XMAIN",184,0)
SHOW(ZN) ;
"RTN","C0XMAIN",185,0)
 ZWR ^TMP("MXMLDOM",$J,1,ZN,*)
"RTN","C0XMAIN",186,0)
 Q
"RTN","C0XMAIN",187,0)
 ;
"RTN","C0XMAIN",188,0)
ANONS() ; RETURNS AN ANONOMOUS SUBJECT
"RTN","C0XMAIN",189,0)
 Q "_S:"_$$LKY9
"RTN","C0XMAIN",190,0)
 ;
"RTN","C0XMAIN",191,0)
NEWG(NGRAPH,NMETA) ; CREATES A NEW META GRAPH, MARKS IT AS UNFINISHED
"RTN","C0XMAIN",192,0)
 ; THEN CREATES A NEW GRAPH AND POINTS THE METAGRAPH TO IT
"RTN","C0XMAIN",193,0)
 ; NGRAPH AND NMETA ARE PASSED BY REFERENCE AND ARE THE RETURN
"RTN","C0XMAIN",194,0)
 S NGRAPH="G"_$$LKY9
"RTN","C0XMAIN",195,0)
 S NMETA=NGRAPH_"A"
"RTN","C0XMAIN",196,0)
 Q
"RTN","C0XMAIN",197,0)
 ;
"RTN","C0XMAIN",198,0)
ADD(ZG,ZS,ZP,ZO,FARY) ; ADD A TRIPLE TO THE TRIPLESTORE. ALL VALUES ARE TEXT
"RTN","C0XMAIN",199,0)
 ; THE FDA IS SET UP BUT THE FILES ARE NOT UPDATED. CALL UPDIE TO COMPLETE
"RTN","C0XMAIN",200,0)
 I '$D(FARY) D  ;
"RTN","C0XMAIN",201,0)
 . D INITFARY("C0XFARY")
"RTN","C0XMAIN",202,0)
 . S FARY="C0XFARY"
"RTN","C0XMAIN",203,0)
 D USEFARY(FARY)
"RTN","C0XMAIN",204,0)
 I '$D(C0XCNT) S C0XCNT=0
"RTN","C0XMAIN",205,0)
 N ZNODE
"RTN","C0XMAIN",206,0)
 S ZNODE="N"_$$LKY17
"RTN","C0XMAIN",207,0)
 N ZNARY ; GET READY TO CALL IENOFA
"RTN","C0XMAIN",208,0)
 S ZNARY("ZG",ZG)=""
"RTN","C0XMAIN",209,0)
 S ZNARY("ZS",ZS)=""
"RTN","C0XMAIN",210,0)
 S ZNARY("ZP",ZP)=""
"RTN","C0XMAIN",211,0)
 S ZNARY("ZO",ZO)=""
"RTN","C0XMAIN",212,0)
 D IENOFA(.ZIENS,.ZNARY,FARY) ; RESOLVE/ADD STRINGS
"RTN","C0XMAIN",213,0)
 ;S ZGIEN=$$IENOF(ZG) ; LAYGO TO GET IEN
"RTN","C0XMAIN",214,0)
 ;S ZSIEN=$$IENOF(ZS)
"RTN","C0XMAIN",215,0)
 ;S ZPIEN=$$IENOF(ZP)
"RTN","C0XMAIN",216,0)
 ;S ZOIEN=$$IENOF(ZO)
"RTN","C0XMAIN",217,0)
 ;I $D(C0XFDA) D UPDIE ; ADD THE STRINGS IF NEEDED
"RTN","C0XMAIN",218,0)
 S C0XCNT=C0XCNT+1
"RTN","C0XMAIN",219,0)
 S C0XFDA(C0XTFN,"?+"_C0XCNT_",",.01)=ZNODE
"RTN","C0XMAIN",220,0)
 S C0XFDA(C0XTFN,"?+"_C0XCNT_",",.02)=$O(ZIENS("IEN","ZG",""))
"RTN","C0XMAIN",221,0)
 S C0XFDA(C0XTFN,"?+"_C0XCNT_",",.03)=$O(ZIENS("IEN","ZS",""))
"RTN","C0XMAIN",222,0)
 S C0XFDA(C0XTFN,"?+"_C0XCNT_",",.04)=$O(ZIENS("IEN","ZP",""))
"RTN","C0XMAIN",223,0)
 S C0XFDA(C0XTFN,"?+"_C0XCNT_",",.05)=$O(ZIENS("IEN","ZO",""))
"RTN","C0XMAIN",224,0)
 ; REMEMBER TO CALL UPDIE WHEN YOU'RE DONE
"RTN","C0XMAIN",225,0)
 Q
"RTN","C0XMAIN",226,0)
 ;
"RTN","C0XMAIN",227,0)
LKY9() ;EXTRINIC THAT RETURNS A RANDOM 9 DIGIT NUMBER. USED FOR GENERATING
"RTN","C0XMAIN",228,0)
 ; UNIQUE NODE AND GRAPH NAMES
"RTN","C0XMAIN",229,0)
 N ZN,ZI
"RTN","C0XMAIN",230,0)
 S ZN=""
"RTN","C0XMAIN",231,0)
 F ZI=1:1:9 D  ;
"RTN","C0XMAIN",232,0)
 . S ZN=ZN_$R(10)
"RTN","C0XMAIN",233,0)
 Q ZN
"RTN","C0XMAIN",234,0)
 ;
"RTN","C0XMAIN",235,0)
LKY17() ;EXTRINIC THAT RETURNS A RANDOM 9 DIGIT NUMBER. USED FOR GENERATING
"RTN","C0XMAIN",236,0)
 ; UNIQUE NODE AND GRAPH NAMES
"RTN","C0XMAIN",237,0)
 N ZN,ZI
"RTN","C0XMAIN",238,0)
 S ZN=""
"RTN","C0XMAIN",239,0)
 F ZI=1:1:17 D  ;
"RTN","C0XMAIN",240,0)
 . S ZN=ZN_$R(10)
"RTN","C0XMAIN",241,0)
 Q ZN
"RTN","C0XMAIN",242,0)
 ;
"RTN","C0XMAIN",243,0)
IENOF(ZSTRING,FARY) ; EXTRINSIC WHICH RETURNS THE IEN OF ZS IN THE STRINGS FILE
"RTN","C0XMAIN",244,0)
 I '$D(FARY) D  ;
"RTN","C0XMAIN",245,0)
 . D INITFARY("C0XFARY")
"RTN","C0XMAIN",246,0)
 . S FARY="C0XFARY"
"RTN","C0XMAIN",247,0)
 N ZIEN
"RTN","C0XMAIN",248,0)
 S ZIEN=$O(@C0XSN@("B",ZSTRING,""))
"RTN","C0XMAIN",249,0)
 I ZIEN="" D  ;
"RTN","C0XMAIN",250,0)
 . S C0XFDA2(C0XSFN,"+1,",.01)=ZSTRING
"RTN","C0XMAIN",251,0)
 . D UPDIE(.C0XFDA2)
"RTN","C0XMAIN",252,0)
 . S ZIEN=$O(@C0XSN@("B",ZSTRING,""))
"RTN","C0XMAIN",253,0)
 . K C0XFDA2
"RTN","C0XMAIN",254,0)
 Q ZIEN
"RTN","C0XMAIN",255,0)
 ;
"RTN","C0XMAIN",256,0)
IENOFA(ZOUTARY,ZINARY,FARY) ; RESOLVE STRINGS TO IEN IN STRINGS FILE 
"RTN","C0XMAIN",257,0)
 ; OR ADD THEM IF
"RTN","C0XMAIN",258,0)
 ; MISSING. ZINARY AND ZOUTARY ARE PASSED BY REFERENCE 
"RTN","C0XMAIN",259,0)
 ; ZINARY LOOKS LIKE ZINARY("VAR","VAL")=""
"RTN","C0XMAIN",260,0)
 ; RETURNS IN ZOUTARY OF THE FORM ZOUTARY("IEN","VAR",IEN)=""
"RTN","C0XMAIN",261,0)
 I '$D(FARY) D  ;
"RTN","C0XMAIN",262,0)
 . D INITFARY("C0XFARY")
"RTN","C0XMAIN",263,0)
 . S FARY="C0XFARY"
"RTN","C0XMAIN",264,0)
 K ZOUTARY ; START WITH CLEAN RESULTS
"RTN","C0XMAIN",265,0)
 K C0XFDA2 ; USE A SEPARATE FDA FOR THIS
"RTN","C0XMAIN",266,0)
 N ZI S ZI=""
"RTN","C0XMAIN",267,0)
 N ZV,ZIEN
"RTN","C0XMAIN",268,0)
 N ZCNT S ZCNT=0
"RTN","C0XMAIN",269,0)
 F  S ZI=$O(ZINARY(ZI)) Q:ZI=""  D  ; LOOK FOR MISSING STRINGS
"RTN","C0XMAIN",270,0)
 . S ZV=$O(ZINARY(ZI,""))
"RTN","C0XMAIN",271,0)
 . I $O(@C0XSN@("B",ZV,""))="" D  ;
"RTN","C0XMAIN",272,0)
 . . S ZCNT=ZCNT+1
"RTN","C0XMAIN",273,0)
 . . S C0XFDA2(C0XSFN,"+"_ZCNT_",",.01)=ZV
"RTN","C0XMAIN",274,0)
 I $D(C0XFDA2) D  ;
"RTN","C0XMAIN",275,0)
 . D UPDIE(.C0XFDA2) ; ADD MISSING STRINGS
"RTN","C0XMAIN",276,0)
 . K C0XFDA2 ; CLEAN UP
"RTN","C0XMAIN",277,0)
 F  S ZI=$O(ZINARY(ZI)) Q:ZI=""  D  ; NOT GET ALL IENS
"RTN","C0XMAIN",278,0)
 . S ZV=$O(ZINARY(ZI,""))
"RTN","C0XMAIN",279,0)
 . S ZIEN=$O(@C0XSN@("B",ZV,"")) ; THEY SHOULD BE THERE NOW
"RTN","C0XMAIN",280,0)
 . I ZIEN="" D  ;
"RTN","C0XMAIN",281,0)
 . . W !,"ERROR ADDING STRING: ",ZV
"RTN","C0XMAIN",282,0)
 . . B
"RTN","C0XMAIN",283,0)
 . S ZOUTARY("IEN",ZI,ZIEN)=""
"RTN","C0XMAIN",284,0)
 Q
"RTN","C0XMAIN",285,0)
 ;
"RTN","C0XMAIN",286,0)
UPDIE(ZFDA) ; INTERNAL ROUTINE TO CALL UPDATE^DIE AND CHECK FOR ERRORS
"RTN","C0XMAIN",287,0)
 ; ZFDA IS PASSED BY REFERENCE
"RTN","C0XMAIN",288,0)
 ;ZWR ZFDA
"RTN","C0XMAIN",289,0)
 ;B
"RTN","C0XMAIN",290,0)
 K ZERR
"RTN","C0XMAIN",291,0)
 D CLEAN^DILF
"RTN","C0XMAIN",292,0)
 D UPDATE^DIE("","ZFDA","","ZERR")
"RTN","C0XMAIN",293,0)
 I $D(ZERR) S ZZERR=ZZERR ; ZZERR DOESN'T EXIST, 
"RTN","C0XMAIN",294,0)
 ; INVOKE THE ERROR TRAP IF TASKED
"RTN","C0XMAIN",295,0)
 ;. W "ERROR",!
"RTN","C0XMAIN",296,0)
 ;. ZWR ZERR
"RTN","C0XMAIN",297,0)
 ;. B
"RTN","C0XMAIN",298,0)
 K ZFDA
"RTN","C0XMAIN",299,0)
 Q
"RTN","C0XMAIN",300,0)
 ;
"SEC","^DIC",172.101,172.101,0,"AUDIT")
@
"SEC","^DIC",172.101,172.101,0,"DD")
@
"SEC","^DIC",172.101,172.101,0,"DEL")
@
"SEC","^DIC",172.101,172.101,0,"LAYGO")
@
"SEC","^DIC",172.101,172.101,0,"RD")
@
"SEC","^DIC",172.101,172.101,0,"WR")
@
"SEC","^DIC",172.201,172.201,0,"AUDIT")
@
"SEC","^DIC",172.201,172.201,0,"DD")
@
"SEC","^DIC",172.201,172.201,0,"DEL")
@
"SEC","^DIC",172.201,172.201,0,"LAYGO")
@
"SEC","^DIC",172.201,172.201,0,"RD")
@
"SEC","^DIC",172.201,172.201,0,"WR")
@
"VER")
8.0^22.0
"^DD",172.101,172.101,0)
FIELD^^.05^5
"^DD",172.101,172.101,0,"DDA")
N
"^DD",172.101,172.101,0,"DT")
3111013
"^DD",172.101,172.101,0,"ID",.02)
S %I=Y,Y=$S('$D(^(0)):"",$D(^C0X(201,+$P(^(0),U,2),0))#2:$P(^(0),U,1),1:""),C=$P(^DD(172.201,.01,0),U,2) D Y^DIQ:Y]"" W "   ",Y,@("$E("_DIC_"%I,0),0)") S Y=%I K %I
"^DD",172.101,172.101,0,"ID",.03)
S %I=Y,Y=$S('$D(^(0)):"",$D(^C0X(201,+$P(^(0),U,3),0))#2:$P(^(0),U,1),1:""),C=$P(^DD(172.201,.01,0),U,2) D Y^DIQ:Y]"" W "   ",Y,@("$E("_DIC_"%I,0),0)") S Y=%I K %I
"^DD",172.101,172.101,0,"ID",.04)
S %I=Y,Y=$S('$D(^(0)):"",$D(^C0X(201,+$P(^(0),U,4),0))#2:$P(^(0),U,1),1:""),C=$P(^DD(172.201,.01,0),U,2) D Y^DIQ:Y]"" W "   ",Y,@("$E("_DIC_"%I,0),0)") S Y=%I K %I
"^DD",172.101,172.101,0,"ID",.05)
S %I=Y,Y=$S('$D(^(0)):"",$D(^C0X(201,+$P(^(0),U,5),0))#2:$P(^(0),U,1),1:""),C=$P(^DD(172.201,.01,0),U,2) D Y^DIQ:Y]"" W "   ",Y,@("$E("_DIC_"%I,0),0)") S Y=%I K %I
"^DD",172.101,172.101,0,"IX","B",172.101,.01)

"^DD",172.101,172.101,0,"NM","C0X TRIPLE")

"^DD",172.101,172.101,.01,0)
NODEID^RF^^0;1^K:$L(X)>30!($L(X)<3)!'(X'?1P.E) X
"^DD",172.101,172.101,.01,.1)
TRIPLE NODE ID
"^DD",172.101,172.101,.01,1,0)
^.1
"^DD",172.101,172.101,.01,1,1,0)
172.101^B
"^DD",172.101,172.101,.01,1,1,1)
S ^C0X(101,"B",$E(X,1,30),DA)=""
"^DD",172.101,172.101,.01,1,1,2)
K ^C0X(101,"B",$E(X,1,30),DA)
"^DD",172.101,172.101,.01,3)
Answer must be 3-30 characters in length
"^DD",172.101,172.101,.01,"DT")
3111013
"^DD",172.101,172.101,.02,0)
GRAPH^P172.201^C0X(201,^0;2^Q
"^DD",172.101,172.101,.02,.1)
TRIPLE GRAPH
"^DD",172.101,172.101,.02,3)
Answer must be 3-240 characters in length
"^DD",172.101,172.101,.02,"DT")
3111013
"^DD",172.101,172.101,.03,0)
SUBJECT^P172.201^C0X(201,^0;3^Q
"^DD",172.101,172.101,.03,.1)
TRIPLE SUBJECT
"^DD",172.101,172.101,.03,"DT")
3111013
"^DD",172.101,172.101,.04,0)
PREDICATE^P172.201^C0X(201,^0;4^Q
"^DD",172.101,172.101,.04,.1)
TRIPLE PREDICATE
"^DD",172.101,172.101,.04,"DT")
3111013
"^DD",172.101,172.101,.05,0)
OBJECT^P172.201^C0X(201,^0;5^Q
"^DD",172.101,172.101,.05,.1)
TRIPLE OBJECT
"^DD",172.101,172.101,.05,"DT")
3111013
"^DD",172.201,172.201,0)
FIELD^^1^2
"^DD",172.201,172.201,0,"DDA")
N
"^DD",172.201,172.201,0,"DT")
3111013
"^DD",172.201,172.201,0,"NM","C0X STRING")

"^DD",172.201,172.201,0,"PT",172.101,.02)

"^DD",172.201,172.201,0,"PT",172.101,.03)

"^DD",172.201,172.201,0,"PT",172.101,.04)

"^DD",172.201,172.201,0,"PT",172.101,.05)

"^DD",172.201,172.201,.01,0)
STRING^RF^^0;1^K:$L(X)>240!($L(X)<1)!'(X=X) X
"^DD",172.201,172.201,.01,.1)
TRIPLE STRING
"^DD",172.201,172.201,.01,1,0)
^.1^^0
"^DD",172.201,172.201,.01,3)
Answer must be 1-240 characters in length
"^DD",172.201,172.201,.01,"DT")
3111028
"^DD",172.201,172.201,1,0)
TEXT^172.2011^^1;0
"^DD",172.201,172.2011,0)
TEXT SUB-FIELD^^.01^1
"^DD",172.201,172.2011,0,"DT")
3111013
"^DD",172.201,172.2011,0,"NM","TEXT")

"^DD",172.201,172.2011,0,"UP")
172.201
"^DD",172.201,172.2011,.01,0)
TEXT^Wx^^0;1
"^DD",172.201,172.2011,.01,.1)
LONGER TEXT
"^DD",172.201,172.2011,.01,"DT")
3111013
"^DIC",172.101,172.101,0)
C0X TRIPLE^172.101
"^DIC",172.101,172.101,0,"GL")
^C0X(101,
"^DIC",172.101,"B","C0X TRIPLE",172.101)

"^DIC",172.201,172.201,0)
C0X STRING^172.201
"^DIC",172.201,172.201,0,"GL")
^C0X(201,
"^DIC",172.201,"B","C0X STRING",172.201)

**END**
**END**
